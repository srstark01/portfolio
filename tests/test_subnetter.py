import pytest

from subnetter.subnetter import Subnetter

cases = [
    ['252.162.90.71', '0.0.0.0', '0.0.0.1',  # IP Add, Net Add, First Host
     '255.255.255.254', '255.255.255.255',  # Last Host, Broadcast Add
     '4294967296', '0.0.0.0',  # Total Hosts, Subnet Mask
     '255.255.255.255',  # Wildcard Mask
     '11111100.10100010.01011010.01000111',  # Binary IP Address
     '00000000.00000000.00000000.00000000',  # Binary Subnet Mask
     '00000000.00000000.00000000.00000000', '0'],  # Binary Network Address
    ['220.120.107.250', '128.0.0.0', '128.0.0.1', '255.255.255.254',
     '255.255.255.255', '2147483648', '128.0.0.0', '127.255.255.255',
     '11011100.01111000.01101011.11111010',
     '10000000.00000000.00000000.00000000',
     '10000000.00000000.00000000.00000000', '1'],
    ['223.80.130.10', '192.0.0.0', '192.0.0.1', '255.255.255.254',
     '255.255.255.255', '1073741824', '192.0.0.0', '63.255.255.255',
     '11011111.01010000.10000010.00001010',
     '11000000.00000000.00000000.00000000',
     '11000000.00000000.00000000.00000000', '2'],
    ['12.178.195.52', '0.0.0.0', '0.0.0.1', '31.255.255.254', '31.255.255.255',
     '536870912', '224.0.0.0', '31.255.255.255',
     '00001100.10110010.11000011.00110100',
     '11100000.00000000.00000000.00000000',
     '00000000.00000000.00000000.00000000', '3'],
    ['207.105.71.99', '192.0.0.0', '192.0.0.1', '207.255.255.254',
     '207.255.255.255', '268435456', '240.0.0.0', '15.255.255.255',
     '11001111.01101001.01000111.01100011',
     '11110000.00000000.00000000.00000000',
     '11000000.00000000.00000000.00000000', '4'],
    ['203.76.29.198', '200.0.0.0', '200.0.0.1', '207.255.255.254',
     '207.255.255.255', '134217728', '248.0.0.0', '7.255.255.255',
     '11001011.01001100.00011101.11000110',
     '11111000.00000000.00000000.00000000',
     '11001000.00000000.00000000.00000000', '5'],
    ['187.130.126.224', '184.0.0.0', '184.0.0.1', '187.255.255.254',
     '187.255.255.255', '67108864', '252.0.0.0', '3.255.255.255',
     '10111011.10000010.01111110.11100000',
     '11111100.00000000.00000000.00000000',
     '10111000.00000000.00000000.00000000', '6'],
    ['127.16.131.63', '126.0.0.0', '126.0.0.1', '127.255.255.254',
     '127.255.255.255', '33554432', '254.0.0.0', '1.255.255.255',
     '01111111.00010000.10000011.00111111',
     '11111110.00000000.00000000.00000000',
     '01111110.00000000.00000000.00000000', '7'],
    ['91.142.187.38', '91.0.0.0', '91.0.0.1', '91.255.255.254',
     '91.255.255.255', '16777216', '255.0.0.0', '0.255.255.255',
     '01011011.10001110.10111011.00100110',
     '11111111.00000000.00000000.00000000',
     '01011011.00000000.00000000.00000000', '8'],
    ['150.182.162.48', '150.128.0.0', '150.128.0.1', '150.255.255.254',
     '150.255.255.255', '8388608', '255.128.0.0', '0.127.255.255',
     '10010110.10110110.10100010.00110000',
     '11111111.10000000.00000000.00000000',
     '10010110.10000000.00000000.00000000', '9'],
    ['61.82.136.227', '61.64.0.0', '61.64.0.1', '61.127.255.254',
     '61.127.255.255', '4194304', '255.192.0.0', '0.63.255.255',
     '00111101.01010010.10001000.11100011',
     '11111111.11000000.00000000.00000000',
     '00111101.01000000.00000000.00000000', '10'],
    ['149.51.120.141', '149.32.0.0', '149.32.0.1', '149.63.255.254',
     '149.63.255.255', '2097152', '255.224.0.0', '0.31.255.255',
     '10010101.00110011.01111000.10001101',
     '11111111.11100000.00000000.00000000',
     '10010101.00100000.00000000.00000000', '11'],
    ['209.250.53.161', '209.240.0.0', '209.240.0.1', '209.255.255.254',
     '209.255.255.255', '1048576', '255.240.0.0', '0.15.255.255',
     '11010001.11111010.00110101.10100001',
     '11111111.11110000.00000000.00000000',
     '11010001.11110000.00000000.00000000', '12'],
    ['49.222.143.19', '49.216.0.0', '49.216.0.1', '49.223.255.254',
     '49.223.255.255', '524288', '255.248.0.0', '0.7.255.255',
     '00110001.11011110.10001111.00010011',
     '11111111.11111000.00000000.00000000',
     '00110001.11011000.00000000.00000000', '13'],
    ['64.234.225.68', '64.232.0.0', '64.232.0.1', '64.235.255.254',
     '64.235.255.255', '262144', '255.252.0.0', '0.3.255.255',
     '01000000.11101010.11100001.01000100',
     '11111111.11111100.00000000.00000000',
     '01000000.11101000.00000000.00000000', '14'],
    ['119.140.27.46', '119.140.0.0', '119.140.0.1', '119.141.255.254',
     '119.141.255.255', '131072', '255.254.0.0', '0.1.255.255',
     '01110111.10001100.00011011.00101110',
     '11111111.11111110.00000000.00000000',
     '01110111.10001100.00000000.00000000', '15'],
    ['148.230.9.167', '148.230.0.0', '148.230.0.1', '148.230.255.254',
     '148.230.255.255', '65536', '255.255.0.0', '0.0.255.255',
     '10010100.11100110.00001001.10100111',
     '11111111.11111111.00000000.00000000',
     '10010100.11100110.00000000.00000000', '16'],
    ['218.3.153.94', '218.3.128.0', '218.3.128.1', '218.3.255.254',
     '218.3.255.255', '32768', '255.255.128.0', '0.0.127.255',
     '11011010.00000011.10011001.01011110',
     '11111111.11111111.10000000.00000000',
     '11011010.00000011.10000000.00000000', '17'],
    ['212.35.90.18', '212.35.64.0', '212.35.64.1', '212.35.127.254',
     '212.35.127.255', '16384', '255.255.192.0', '0.0.63.255',
     '11010100.00100011.01011010.00010010',
     '11111111.11111111.11000000.00000000',
     '11010100.00100011.01000000.00000000', '18'],
    ['28.96.237.242', '28.96.224.0', '28.96.224.1', '28.96.255.254',
     '28.96.255.255', '8192', '255.255.224.0', '0.0.31.255',
     '00011100.01100000.11101101.11110010',
     '11111111.11111111.11100000.00000000',
     '00011100.01100000.11100000.00000000', '19'],
    ['77.140.202.115', '77.140.192.0', '77.140.192.1', '77.140.207.254',
     '77.140.207.255', '4096', '255.255.240.0', '0.0.15.255',
     '01001101.10001100.11001010.01110011',
     '11111111.11111111.11110000.00000000',
     '01001101.10001100.11000000.00000000', '20'],
    ['12.4.44.54', '12.4.40.0', '12.4.40.1', '12.4.47.254', '12.4.47.255',
     '2048', '255.255.248.0', '0.0.7.255',
     '00001100.00000100.00101100.00110110',
     '11111111.11111111.11111000.00000000',
     '00001100.00000100.00101000.00000000', '21'],
    ['183.140.245.247', '183.140.244.0', '183.140.244.1', '183.140.247.254',
     '183.140.247.255', '1024', '255.255.252.0', '0.0.3.255',
     '10110111.10001100.11110101.11110111',
     '11111111.11111111.11111100.00000000',
     '10110111.10001100.11110100.00000000', '22'],
    ['0.94.177.177', '0.94.176.0', '0.94.176.1', '0.94.177.254',
     '0.94.177.255', '512', '255.255.254.0', '0.0.1.255',
     '00000000.01011110.10110001.10110001',
     '11111111.11111111.11111110.00000000',
     '00000000.01011110.10110000.00000000', '23'],
    ['180.230.243.0', '180.230.243.0', '180.230.243.1', '180.230.243.254',
     '180.230.243.255', '256', '255.255.255.0', '0.0.0.255',
     '10110100.11100110.11110011.00000000',
     '11111111.11111111.11111111.00000000',
     '10110100.11100110.11110011.00000000', '24'],
    ['255.77.193.203', '255.77.193.128', '255.77.193.129', '255.77.193.254',
     '255.77.193.255', '128', '255.255.255.128', '0.0.0.127',
     '11111111.01001101.11000001.11001011',
     '11111111.11111111.11111111.10000000',
     '11111111.01001101.11000001.10000000', '25'],
    ['190.137.72.255', '190.137.72.192', '190.137.72.193', '190.137.72.254',
     '190.137.72.255', '64', '255.255.255.192', '0.0.0.63',
     '10111110.10001001.01001000.11111111',
     '11111111.11111111.11111111.11000000',
     '10111110.10001001.01001000.11000000', '26'],
    ['20.231.92.6', '20.231.92.0', '20.231.92.1', '20.231.92.30',
     '20.231.92.31', '32', '255.255.255.224', '0.0.0.31',
     '00010100.11100111.01011100.00000110',
     '11111111.11111111.11111111.11100000',
     '00010100.11100111.01011100.00000000', '27'],
    ['185.155.196.151', '185.155.196.144', '185.155.196.145',
     '185.155.196.158', '185.155.196.159', '16', '255.255.255.240', '0.0.0.15',
     '10111001.10011011.11000100.10010111',
     '11111111.11111111.11111111.11110000',
     '10111001.10011011.11000100.10010000', '28'],
    ['175.61.48.147', '175.61.48.144', '175.61.48.145', '175.61.48.150',
     '175.61.48.151', '8', '255.255.255.248', '0.0.0.7',
     '10101111.00111101.00110000.10010011',
     '11111111.11111111.11111111.11111000',
     '10101111.00111101.00110000.10010000', '29'],
    ['60.219.99.11', '60.219.99.8', '60.219.99.9', '60.219.99.10',
     '60.219.99.11', '4', '255.255.255.252', '0.0.0.3',
     '00111100.11011011.01100011.00001011',
     '11111111.11111111.11111111.11111100',
     '00111100.11011011.01100011.00001000', '30'],
    ['119.17.102.219', '119.17.102.218', 'NA', 'NA', '119.17.102.219', '2',
     '255.255.255.254', '0.0.0.1', '01110111.00010001.01100110.11011011',
     '11111111.11111111.11111111.11111110',
     '01110111.00010001.01100110.11011010', '31'],
    ['71.147.201.30', '71.147.201.30', 'NA', 'NA', '71.147.201.30', '1',
     '255.255.255.255', '0.0.0.0', '01000111.10010011.11001001.00011110',
     '11111111.11111111.11111111.11111111',
     '01000111.10010011.11001001.00011110', '32'],
]


badIPs = [
        ['192', '255.255.255.252'],
        ['192.168', '255.255.255.252'],
        ['192.168.10', '255.255.255.252'],
        ['192.168.10.10.10', '255.255.255.252'],
        ['192.168.10.256', '255.255.255.252'],
        ['192.168.-1.10', '255.255.255.252'],
        ['192.a.10.10', '255.255.255.252'],
        ['19992.168.10.10', '255.255.255.252']
        ]

badMasks = [
        ['192.168.10.10', '255'],
        ['192.168.10.10', '255.255'],
        ['192.168.10.10', '255.255.255'],
        ['192.168.10.10', '255.255.255.252.255'],
        ['192.168.10.10', 'a.255.255.252'],
        ['192.168.10.10', '255.-27.255.252'],
        ['192.168.10.10', '255.255.256.252'],
        ['192.168.10.10', '255.255.255.66']
        ]

class TestSubnetter:

    def test_cidr_to_bin(self):
        for case in cases:
            assert Subnetter(case[0], case[11]).cidr_to_bin() == case[9]

    def test_binary(self):
        for case in cases:
            assert Subnetter(case[0], case[6]).binary() == (case[8], case[9])
            assert Subnetter(case[0], case[11]).binary() == (case[8], case[9])

    def test_ander(self):
        for case in cases:
            assert Subnetter(case[0], case[6]).ander() == (case[10], case[9])
            assert Subnetter(case[0], case[11]).ander() == (case[10], case[9])

    def test_network(self):
        for case in cases:
            assert Subnetter(case[0], case[6]).network() == (case[1], case[6])
            assert Subnetter(case[0], case[11]).network() == (case[1], case[6])

    def test_first(self):
        for case in cases:
            assert Subnetter(case[0], case[6]).first() == case[2]
            assert Subnetter(case[0], case[11]).first() == case[2]

    def test_broadcast(self):
        for case in cases:
            assert Subnetter(case[0], case[6]).broadcast() == case[4]
            assert Subnetter(case[0], case[11]).broadcast() == case[4]

    def test_last(self):
        for case in cases:
            assert Subnetter(case[0], case[6]).last() == case[3]
            assert Subnetter(case[0], case[11]).last() == case[3]

    def test_hosts(self):
        for case in cases:
            assert Subnetter(case[0], case[6]).hosts() == int(case[5])
            assert Subnetter(case[0], case[11]).hosts() == int(case[5])

    def test_wildcard(self):
        for case in cases:
            assert Subnetter(case[0], case[6]).wildcard() == case[7]
            assert Subnetter(case[0], case[11]).wildcard() == case[7]

    def test_cidr(self):
        for case in cases:
            assert Subnetter(case[0], case[6]).cidr() == int(case[11])
            assert Subnetter(case[0], case[11]).cidr() == int(case[11])

    def test_badIPs(self):
        for ip in badIPs:
            print(ip[0], ip[1])
            with pytest.raises(ValueError) as exception:
              Subnetter(ip[0], ip[1])
            assert str(exception) == (
                "<ExceptionInfo ValueError('IP is Invalid') tblen=3>")

    def test_badMasks(self):
        for mask in badMasks:
            print(mask[0], mask[1])
            with pytest.raises(ValueError) as exception:
              Subnetter(mask[0], mask[1])
            assert str(exception) == (
                "<ExceptionInfo ValueError('Subnet is Invalid') tblen=3>")

